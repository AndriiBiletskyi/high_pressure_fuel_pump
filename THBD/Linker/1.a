;/*****************************************************
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <spi.h>
;
;#define PLUS        (PINC.1==0)
;#define MINUS       (PINC.0==0)
;#define START       (PINC.2==0)
;#define CS_ON       PORTB&=~(1<<2);
;#define CS_OFF      PORTB|=(1<<2);
;#define DELAY       400
;#define STEP_CYCLE  10
;#define MAX_CYCLE   990
;#define MIN_CYCLE   0
;
;
;static flash unsigned char digit[]={
;    0b10000001, //0
;    0b11110011, //1
;    0b01001001, //2
;    0b01100001, //3
;    0b00110011, //4
;    0b00100101, //5
;    0b00000101, //6
;    0b11110001, //7
;    0b00000001, //8
;    0b00100001  //9
;};
;char A1=0,A2=0,A3=0,A4=0;
;unsigned long int count = 0;
;unsigned long int speed = 0;
;unsigned int speed_show = 0;
;char en_speed_measure = 0;
;int cycles = 400;
;int left = 0;
;
;void init(void);//Initialization of the entire periphery
;interrupt [TIM0_OVF] void timer0_ovf_isr(void);//counting time
;interrupt [TIM1_CAPT] void timer1_capt_isr(void);//counting speed
;void sem_seg(int a);//definition of the value of segments
;void buttons(void);//processing of buttons strokes
;void send_hc595(char anods, char led_1, char led_2);//data transfer
;void set_speed(void);//setting the speed
;void set_timer(char mode);//setting timer's mode
;
;void main(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0038     char led_anods  = 0b11111111;
; 0000 0039     char led_first  = 0b11111111;
; 0000 003A     char led_second = 0b11111111;
; 0000 003B     char first_indikator    = 1;
; 0000 003C     char second_indikator   = 5;
; 0000 003D 
; 0000 003E     init();
;	led_anods -> R17
;	led_first -> R16
;	led_second -> R19
;	first_indikator -> R18
;	second_indikator -> R21
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003F 
; 0000 0040 while (1)
;PCODE: $00000019 VOL: 0
; 0000 0041       {
; 0000 0042         led_anods = 0b11111111;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0043 
; 0000 0044         first_indikator++;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0045 
; 0000 0046         if(speed_show<10){
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0047             if(first_indikator>4)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0048                 first_indikator = 4;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0049         }
;PCODE: $00000026 VOL: 0
; 0000 004A 
; 0000 004B         if((speed_show>=10) && (speed_show<100)){
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004C             if(first_indikator>4)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004D                 first_indikator = 3;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004E         }
;PCODE: $00000037 VOL: 0
; 0000 004F 
; 0000 0050         if((speed_show>=100) && (speed_show<1000)){
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0051             if(first_indikator>4)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0052                 first_indikator = 2;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0053         }
;PCODE: $00000048 VOL: 0
; 0000 0054 
; 0000 0055         if(speed_show>=1000){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0056             if(first_indikator>4)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0057                 first_indikator = 1;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0058         }
;PCODE: $00000052 VOL: 0
; 0000 0059 
; 0000 005A         second_indikator++;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005B 
; 0000 005C         if(second_indikator>7)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005D             second_indikator = 5;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005E 
; 0000 005F         led_anods&=~(1<<first_indikator);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0060         led_anods&=~(1<<second_indikator);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0061 
; 0000 0062         sem_seg(left);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0063 
; 0000 0064         if(second_indikator==5)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0065             led_second = digit[A3];
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0066 
; 0000 0067         if(second_indikator==6)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0068             led_second = digit[A2];
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0069 
; 0000 006A         if(second_indikator==7)
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006B             led_second = digit[A1];
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 006C 
; 0000 006D         sem_seg(speed_show);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006E 
; 0000 006F         if(first_indikator==1)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0070             led_first = digit[A4];
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0071 
; 0000 0072         if(first_indikator==2)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0073             led_first = digit[A3];
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0074 
; 0000 0075         if(first_indikator==3)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0076             led_first = digit[A2];
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0077 
; 0000 0078         if(first_indikator==4)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0079             led_first = digit[A1];
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 007A 
; 0000 007B         send_hc595(led_anods,led_first,led_second);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 007C 
; 0000 007D         buttons();
;PCODE: $000000A8 VOL: 0
; 0000 007E         set_speed();
;PCODE: $000000A9 VOL: 0
; 0000 007F 
; 0000 0080       }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0081 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0086 {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0087    count++;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0088 
; 0000 0089    if(count>98){
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 008A         count = 0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 008B         speed = 0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 008C         en_speed_measure = 0;
;PCODE: $000000BC VOL: 0
; 0000 008D    }
; 0000 008E }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0000 0093 {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0094     if(en_speed_measure){
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0095         speed = 250000/(count*256 + TCNT0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0096         TCNT0 = 1;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0097         count = 0;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0098     }
; 0000 0099     en_speed_measure = 1;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 009A }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
;void sem_seg(int a)
; 0000 009F {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A0     A1=a%10;
;PCODE: $000000DC VOL: 0
;	a -> Y+0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00A1     A2=(a%100)/10;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00A2     A3=(a%1000)/100;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A3     A4=(a%10000)/1000;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00A4 }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
;void buttons(void)
; 0000 00A9 {
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00AA     static char is_but_pres = 0;
; 0000 00AB     static char is_stop = 0;
; 0000 00AC     static unsigned int pause = 0;
; 0000 00AD     static unsigned int pause_start = 0;
; 0000 00AE     static unsigned int pause_stop = 0;
; 0000 00AF     static char is_start_pres = 0;
; 0000 00B0     static char rele = 0;
; 0000 00B1 
; 0000 00B2     if(PLUS){
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00B3         if(!is_but_pres){
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00B4             cycles += STEP_CYCLE;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00B5 
; 0000 00B6             if(cycles>MAX_CYCLE)
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B7                 cycles = MIN_CYCLE;
;PCODE: $00000107 VOL: 0
; 0000 00B8 
; 0000 00B9             is_but_pres = 1;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00BA         }
; 0000 00BB     }
;PCODE: $0000010B VOL: 0
; 0000 00BC 
; 0000 00BD     if(MINUS){
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00BE         if(!is_but_pres){
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00BF             cycles -= STEP_CYCLE;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00C0 
; 0000 00C1             if(cycles<MIN_CYCLE)
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00C2                 cycles = MAX_CYCLE;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00C3 
; 0000 00C4             is_but_pres = 1;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00C5         }
; 0000 00C6     }
;PCODE: $0000011D VOL: 0
; 0000 00C7 
; 0000 00C8     if(is_but_pres){
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00C9         pause++;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00CA         if(pause>DELAY){
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00CB             is_but_pres = 0;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00CC             pause = 0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00CD         }
; 0000 00CE     }
;PCODE: $0000012D VOL: 0
; 0000 00CF 
; 0000 00D0     if(START)
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00D1         is_start_pres = 1;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00D2 
; 0000 00D3     if(is_start_pres && !is_stop){
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00D4         pause_start++;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00D5         if(pause_start>4*DELAY){
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00D6             if(START){
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00D7                 is_stop = 1;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00D8             }else{
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00D9                 is_start_pres = 0;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00DA                 pause_start = 0;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00DB                 if(rele){
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00DC                     rele = 0;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00DD                 }else {
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00DE                     rele = 1;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00DF                 }
;PCODE: $0000015A VOL: 0
; 0000 00E0 
; 0000 00E1                 if(rele){
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00E2                     set_timer(3);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00E3                 }else {
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00E4                     set_timer(2);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00E5                 }
;PCODE: $00000164 VOL: 0
; 0000 00E6             }
;PCODE: $00000165 VOL: 0
; 0000 00E7         }
; 0000 00E8 
; 0000 00E9     }
;PCODE: $00000166 VOL: 0
; 0000 00EA 
; 0000 00EB     if(is_stop){
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00EC         pause_stop++;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00ED         rele = 0;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00EE         set_timer(1);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00EF         if(pause_stop>5*DELAY){
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00F0             is_start_pres = 0;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00F1             pause_start = 0;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00F2             is_stop = 0;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00F3             pause_stop=0;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00F4         }
; 0000 00F5     }
;PCODE: $0000017E VOL: 0
; 0000 00F6 
; 0000 00F7     left = cycles - TCNT1/60;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00F8 
; 0000 00F9     if(left<1){
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00FA         left = 0;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00FB         rele = 0;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00FC         set_timer(1);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00FD     }
; 0000 00FE 
; 0000 00FF     if(rele){
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0100         PORTD|=(1<<7);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0101     }else {
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0102         PORTD&=~(1<<7);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0103     }
;PCODE: $0000019B VOL: 0
; 0000 0104 }
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
;void set_timer(char mode)
; 0000 0109 {
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 010A     /*
; 0000 010B         MODES:
; 0000 010C         0 - disable, reset counter
; 0000 010D         1 - enable interrupt from each puls, disable counting pulses, reset counter
; 0000 010E         2 - enable interrupt from each puls, disable counting pulses
; 0000 010F         3 - enable interrupt from each puls, enable counting pulses
; 0000 0110     */
; 0000 0111     switch(mode)
;PCODE: $000001A0 VOL: 0
;	mode -> Y+0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0112     {
; 0000 0113         case 0: TCCR1B = 0x00;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0114                 TCNT1H = 0x00;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0115                 TCNT1L = 0x00;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0116             break;
;PCODE: $000001AB VOL: 0
; 0000 0117 
; 0000 0118         case 1: TCCR1B = 0x40;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0119                 TCNT1H = 0x00;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 011A                 TCNT1L = 0x00;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 011B             break;
;PCODE: $000001B5 VOL: 0
; 0000 011C 
; 0000 011D         case 2: TCCR1B = 0x40;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 011E             break;
;PCODE: $000001BB VOL: 0
; 0000 011F 
; 0000 0120         case 3: TCCR1B = 0x47;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0121             break;
;PCODE: $000001C1 VOL: 0
; 0000 0122 
; 0000 0123         default:
;PCODE: $000001C2 VOL: 0
; 0000 0124     }
;PCODE: $000001C3 VOL: 0
; 0000 0125 }
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
;void set_speed(void)
; 0000 012A {
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 012B     static unsigned int pause = 0;
; 0000 012C 
; 0000 012D     if(pause>2*DELAY){
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 012E         speed_show = speed;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 012F         pause = 0;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0130     }
; 0000 0131     pause++;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0132 }
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
;void send_hc595(char anods, char led_1, char led_2)
; 0000 0137 {
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0138     CS_ON
;PCODE: $000001D9 VOL: 0
;	anods -> Y+2
;	led_1 -> Y+1
;	led_2 -> Y+0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0139     SPDR = anods;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 013A     while(!(SPSR & (1<<SPIF))){}
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 013B     SPDR = led_2;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 013C     while(!(SPSR & (1<<SPIF))){}
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 013D     SPDR = led_1;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 013E     while(!(SPSR & (1<<SPIF))){}
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 013F     CS_OFF
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0140 }
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
;void init(void)
; 0000 0145 {
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0146  // Input/Output Ports initialization
; 0000 0147 // Port B initialization
; 0000 0148 // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 0149 // State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T
; 0000 014A PORTB=0x00;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 014B DDRB=0b00101110;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 014C 
; 0000 014D // Port C initialization
; 0000 014E // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 014F // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0150 PORTC=0b0011111;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0151 DDRC=0b0000000;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0152 
; 0000 0153 // Port D initialization
; 0000 0154 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0155 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0156 PORTD=0b00100000;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0157 DDRD=0b10000000;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0158 
; 0000 0159 // Timer/Counter 0 initialization
; 0000 015A // Clock source: System Clock
; 0000 015B // Clock value: 250,000 kHz
; 0000 015C TCCR0=0x03;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 015D TCNT0=0x00;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 015E 
; 0000 015F // Timer/Counter 1 initialization
; 0000 0160 // Clock source: System Clock
; 0000 0161 // Clock value: Timer1 Stopped
; 0000 0162 // Mode: Normal top=0xFFFF
; 0000 0163 // OC1A output: Discon.
; 0000 0164 // OC1B output: Discon.
; 0000 0165 // Noise Canceler: Off
; 0000 0166 // Input Capture on Rising Edge
; 0000 0167 // Timer1 Overflow Interrupt: Off
; 0000 0168 // Input Capture Interrupt: On
; 0000 0169 // Compare A Match Interrupt: Off
; 0000 016A // Compare B Match Interrupt: Off
; 0000 016B TCCR1A=0x00;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 016C TCCR1B=0x40;  //TCCR1B=0x40; impuls prerblvanie,  TCCR1B=0x47; s4et i prerblvanie
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 016D TCNT1H=0x00;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 016E TCNT1L=0x00;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 016F ICR1H=0x00;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0170 ICR1L=0x00;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0171 OCR1AH=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0172 OCR1AL=0x00;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0173 OCR1BH=0x00;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0174 OCR1BL=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0175 
; 0000 0176 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0177 TIMSK=0x21;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0178 
; 0000 0179 // Analog Comparator initialization
; 0000 017A // Analog Comparator: Off
; 0000 017B // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 017C ACSR=0x80;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 017D SFIOR=0x00;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 017E 
; 0000 017F // SPI initialization
; 0000 0180 // SPI Type: Master
; 0000 0181 // SPI Clock Rate: 125,000 kHz
; 0000 0182 // SPI Clock Phase: Cycle Start
; 0000 0183 // SPI Clock Polarity: High
; 0000 0184 // SPI Data Order: MSB First
; 0000 0185 SPCR=0x53;//5b
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0186 SPSR=0x00;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0187 
; 0000 0188 #asm("sei")
;PCODE: $00000229 VOL: 0
	sei
;PCODE: $0000022A VOL: 0
; 0000 0189 }
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;//-----------------------------------------------------------
;//
;//-----------------------------------------------------------
