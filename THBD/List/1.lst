
AVRASM ver. 2.1.30  E:\projects\THBD\List\1.asm Wed Apr 11 19:30:56 2018

E:\projects\THBD\List\1.asm(1070): warning: Register r5 already defined by the .DEF directive
E:\projects\THBD\List\1.asm(1071): warning: Register r4 already defined by the .DEF directive
E:\projects\THBD\List\1.asm(1072): warning: Register r7 already defined by the .DEF directive
E:\projects\THBD\List\1.asm(1073): warning: Register r6 already defined by the .DEF directive
E:\projects\THBD\List\1.asm(1074): warning: Register r8 already defined by the .DEF directive
E:\projects\THBD\List\1.asm(1075): warning: Register r11 already defined by the .DEF directive
E:\projects\THBD\List\1.asm(1076): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _A1=R5
                 	.DEF _A2=R4
                 	.DEF _A3=R7
                 	.DEF _A4=R6
                 	.DEF _speed_show=R8
                 	.DEF _en_speed_measure=R11
                 	.DEF _cycles=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c020      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c0d7      	RJMP _timer1_capt_isr
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c09b      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _digit_G000:
000013 f381
000014 6149
000015 2533
000016 f105      	.DB  0x81,0xF3,0x49,0x61,0x33,0x25,0x5,0xF1
000017 2101      	.DB  0x1,0x21
                 
                 _0x49:
000018 0000
000019 0000
00001a 0000
00001b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00001c 0190      	.DB  0x90,0x1
                 
                 __GLOBAL_INI_TBL:
00001d 000a      	.DW  0x0A
00001e 0004      	.DW  0x04
00001f 0030      	.DW  _0x49*2
                 
                 _0xFFFFFFFF:
000020 0000      	.DW  0
                 
                 __RESET:
000021 94f8      	CLI
000022 27ee      	CLR  R30
000023 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000024 e0f1      	LDI  R31,1
000025 bffb      	OUT  GICR,R31
000026 bfeb      	OUT  GICR,R30
000027 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000028 e1f8      	LDI  R31,0x18
000029 bdf1      	OUT  WDTCR,R31
00002a bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00002b e08d      	LDI  R24,(14-2)+1
00002c e0a2      	LDI  R26,2
00002d 27bb      	CLR  R27
                 __CLEAR_REG:
00002e 93ed      	ST   X+,R30
00002f 958a      	DEC  R24
000030 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000031 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000032 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000033 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000034 93ed      	ST   X+,R30
000035 9701      	SBIW R24,1
000036 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000037 e3ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000038 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000039 9185      	LPM  R24,Z+
00003a 9195      	LPM  R25,Z+
00003b 9700      	SBIW R24,0
00003c f061      	BREQ __GLOBAL_INI_END
00003d 91a5      	LPM  R26,Z+
00003e 91b5      	LPM  R27,Z+
00003f 9005      	LPM  R0,Z+
000040 9015      	LPM  R1,Z+
000041 01bf      	MOVW R22,R30
000042 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000043 9005      	LPM  R0,Z+
000044 920d      	ST   X+,R0
000045 9701      	SBIW R24,1
000046 f7e1      	BRNE __GLOBAL_INI_LOOP
000047 01fb      	MOVW R30,R22
000048 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000049 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004a bfed      	OUT  SPL,R30
00004b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004e e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004f c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega8
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <spi.h>
                 ;
                 ;#define PLUS        (PINC.1==0)
                 ;#define MINUS       (PINC.0==0)
                 ;#define START       (PINC.2==0)
                 ;#define CS_ON       PORTB&=~(1<<2);
                 ;#define CS_OFF      PORTB|=(1<<2);
                 ;#define DELAY       400
                 ;#define STEP_CYCLE  10
                 ;#define MAX_CYCLE   990
                 ;#define MIN_CYCLE   0
                 ;
                 ;
                 ;static flash unsigned char digit[]={
                 ;    0b10000001, //0
                 ;    0b11110011, //1
                 ;    0b01001001, //2
                 ;    0b01100001, //3
                 ;    0b00110011, //4
                 ;    0b00100101, //5
                 ;    0b00000101, //6
                 ;    0b11110001, //7
                 ;    0b00000001, //8
                 ;    0b00100001  //9
                 ;};
                 ;char A1=0,A2=0,A3=0,A4=0;
                 ;unsigned long int count = 0;
                 ;unsigned long int speed = 0;
                 ;unsigned int speed_show = 0;
                 ;char en_speed_measure = 0;
                 ;int cycles = 400;
                 ;int left = 0;
                 ;
                 ;void init(void);//Initialization of the entire periphery
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void);//counting time
                 ;interrupt [TIM1_CAPT] void timer1_capt_isr(void);//counting speed
                 ;void sem_seg(int a);//definition of the value of segments
                 ;void buttons(void);//processing of buttons strokes
                 ;void send_hc595(char anods, char led_1, char led_2);//data transfer
                 ;void set_speed(void);//setting the speed
                 ;void set_timer(char mode);//setting timer's mode
                 ;
                 ;void main(void)
                 ; 0000 0037 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0038     char led_anods  = 0b11111111;
                 ; 0000 0039     char led_first  = 0b11111111;
                 ; 0000 003A     char led_second = 0b11111111;
                 ; 0000 003B     char first_indikator    = 1;
                 ; 0000 003C     char second_indikator   = 5;
                 ; 0000 003D 
                 ; 0000 003E     init();
                 ;	led_anods -> R17
                 ;	led_first -> R16
                 ;	led_second -> R19
                 ;	first_indikator -> R18
                 ;	second_indikator -> R21
000050 ef1f      	LDI  R17,255
000051 ef0f      	LDI  R16,255
000052 ef3f      	LDI  R19,255
000053 e021      	LDI  R18,1
000054 e055      	LDI  R21,5
000055 d1c7      	RCALL _init
                 ; 0000 003F 
                 ; 0000 0040 while (1)
                 _0x3:
                 ; 0000 0041       {
                 ; 0000 0042         led_anods = 0b11111111;
000056 ef1f      	LDI  R17,LOW(255)
                 ; 0000 0043 
                 ; 0000 0044         first_indikator++;
000057 5f2f      	SUBI R18,-1
                 ; 0000 0045 
                 ; 0000 0046         if(speed_show<10){
000058 d1ea      	RCALL SUBOPT_0x0
000059 f418      	BRSH _0x6
                 ; 0000 0047             if(first_indikator>4)
00005a 3025      	CPI  R18,5
00005b f008      	BRLO _0x7
                 ; 0000 0048                 first_indikator = 4;
00005c e024      	LDI  R18,LOW(4)
                 ; 0000 0049         }
                 _0x7:
                 ; 0000 004A 
                 ; 0000 004B         if((speed_show>=10) && (speed_show<100)){
                 _0x6:
00005d d1e5      	RCALL SUBOPT_0x0
00005e f010      	BRLO _0x9
00005f d1e8      	RCALL SUBOPT_0x1
000060 f008      	BRLO _0xA
                 _0x9:
000061 c003      	RJMP _0x8
                 _0xA:
                 ; 0000 004C             if(first_indikator>4)
000062 3025      	CPI  R18,5
000063 f008      	BRLO _0xB
                 ; 0000 004D                 first_indikator = 3;
000064 e023      	LDI  R18,LOW(3)
                 ; 0000 004E         }
                 _0xB:
                 ; 0000 004F 
                 ; 0000 0050         if((speed_show>=100) && (speed_show<1000)){
                 _0x8:
000065 d1e2      	RCALL SUBOPT_0x1
000066 f010      	BRLO _0xD
000067 d1e5      	RCALL SUBOPT_0x2
000068 f008      	BRLO _0xE
                 _0xD:
000069 c003      	RJMP _0xC
                 _0xE:
                 ; 0000 0051             if(first_indikator>4)
00006a 3025      	CPI  R18,5
00006b f008      	BRLO _0xF
                 ; 0000 0052                 first_indikator = 2;
00006c e022      	LDI  R18,LOW(2)
                 ; 0000 0053         }
                 _0xF:
                 ; 0000 0054 
                 ; 0000 0055         if(speed_show>=1000){
                 _0xC:
00006d d1df      	RCALL SUBOPT_0x2
00006e f018      	BRLO _0x10
                 ; 0000 0056             if(first_indikator>4)
00006f 3025      	CPI  R18,5
000070 f008      	BRLO _0x11
                 ; 0000 0057                 first_indikator = 1;
000071 e021      	LDI  R18,LOW(1)
                 ; 0000 0058         }
                 _0x11:
                 ; 0000 0059 
                 ; 0000 005A         second_indikator++;
                 _0x10:
000072 5f5f      	SUBI R21,-1
                 ; 0000 005B 
                 ; 0000 005C         if(second_indikator>7)
000073 3058      	CPI  R21,8
000074 f008      	BRLO _0x12
                 ; 0000 005D             second_indikator = 5;
000075 e055      	LDI  R21,LOW(5)
                 ; 0000 005E 
                 ; 0000 005F         led_anods&=~(1<<first_indikator);
                 _0x12:
000076 2fe2      	MOV  R30,R18
000077 d1da      	RCALL SUBOPT_0x3
                 ; 0000 0060         led_anods&=~(1<<second_indikator);
000078 2fe5      	MOV  R30,R21
000079 d1d8      	RCALL SUBOPT_0x3
                 ; 0000 0061 
                 ; 0000 0062         sem_seg(left);
00007a d1dc      	RCALL SUBOPT_0x4
00007b d0a1      	RCALL _sem_seg
                 ; 0000 0063 
                 ; 0000 0064         if(second_indikator==5)
00007c 3055      	CPI  R21,5
00007d f411      	BRNE _0x13
                 ; 0000 0065             led_second = digit[A3];
00007e d1dd      	RCALL SUBOPT_0x5
00007f 9134      	LPM  R19,Z
                 ; 0000 0066 
                 ; 0000 0067         if(second_indikator==6)
                 _0x13:
000080 3056      	CPI  R21,6
000081 f411      	BRNE _0x14
                 ; 0000 0068             led_second = digit[A2];
000082 d1de      	RCALL SUBOPT_0x6
000083 9134      	LPM  R19,Z
                 ; 0000 0069 
                 ; 0000 006A         if(second_indikator==7)
                 _0x14:
000084 3057      	CPI  R21,7
000085 f411      	BRNE _0x15
                 ; 0000 006B             led_second = digit[A1];
000086 d1df      	RCALL SUBOPT_0x7
000087 9134      	LPM  R19,Z
                 ; 0000 006C 
                 ; 0000 006D         sem_seg(speed_show);
                 _0x15:
000088 01d4      	MOVW R26,R8
000089 d093      	RCALL _sem_seg
                 ; 0000 006E 
                 ; 0000 006F         if(first_indikator==1)
00008a 3021      	CPI  R18,1
00008b f429      	BRNE _0x16
                 ; 0000 0070             led_first = digit[A4];
00008c 2de6      	MOV  R30,R6
00008d d1dd      	RCALL SUBOPT_0x8
00008e 5dea      	SUBI R30,LOW(-_digit_G000*2)
00008f 4fff      	SBCI R31,HIGH(-_digit_G000*2)
000090 9104      	LPM  R16,Z
                 ; 0000 0071 
                 ; 0000 0072         if(first_indikator==2)
                 _0x16:
000091 3022      	CPI  R18,2
000092 f411      	BRNE _0x17
                 ; 0000 0073             led_first = digit[A3];
000093 d1c8      	RCALL SUBOPT_0x5
000094 9104      	LPM  R16,Z
                 ; 0000 0074 
                 ; 0000 0075         if(first_indikator==3)
                 _0x17:
000095 3023      	CPI  R18,3
000096 f411      	BRNE _0x18
                 ; 0000 0076             led_first = digit[A2];
000097 d1c9      	RCALL SUBOPT_0x6
000098 9104      	LPM  R16,Z
                 ; 0000 0077 
                 ; 0000 0078         if(first_indikator==4)
                 _0x18:
000099 3024      	CPI  R18,4
00009a f411      	BRNE _0x19
                 ; 0000 0079             led_first = digit[A1];
00009b d1ca      	RCALL SUBOPT_0x7
00009c 9104      	LPM  R16,Z
                 ; 0000 007A 
                 ; 0000 007B         send_hc595(led_anods,led_first,led_second);
                 _0x19:
00009d 931a      	ST   -Y,R17
00009e 930a      	ST   -Y,R16
00009f 2fa3      	MOV  R26,R19
0000a0 d16b      	RCALL _send_hc595
                 ; 0000 007C 
                 ; 0000 007D         buttons();
0000a1 d09f      	RCALL _buttons
                 ; 0000 007E         set_speed();
0000a2 d154      	RCALL _set_speed
                 ; 0000 007F 
                 ; 0000 0080       }
0000a3 cfb2      	RJMP _0x3
                 ; 0000 0081 }
                 _0x1A:
0000a4 cfff      	RJMP _0x1A
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0086 {
                 _timer0_ovf_isr:
0000a5 936a      	ST   -Y,R22
0000a6 937a      	ST   -Y,R23
0000a7 938a      	ST   -Y,R24
0000a8 939a      	ST   -Y,R25
0000a9 93aa      	ST   -Y,R26
0000aa 93ba      	ST   -Y,R27
0000ab 93ea      	ST   -Y,R30
0000ac 93fa      	ST   -Y,R31
0000ad b7ef      	IN   R30,SREG
0000ae 93ea      	ST   -Y,R30
                 ; 0000 0087    count++;
0000af e6a0      	LDI  R26,LOW(_count)
0000b0 e0b1      	LDI  R27,HIGH(_count)
0000b1 d277      	RCALL __GETD1P_INC
                +
0000b2 5fef     +SUBI R30 , LOW ( - 1 )
0000b3 4fff     +SBCI R31 , HIGH ( - 1 )
0000b4 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0000b5 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0000b6 d277      	RCALL __PUTDP1_DEC
                 ; 0000 0088 
                 ; 0000 0089    if(count>98){
0000b7 91a0 0160 	LDS  R26,_count
0000b9 91b0 0161 	LDS  R27,_count+1
0000bb 9180 0162 	LDS  R24,_count+2
0000bd 9190 0163 	LDS  R25,_count+3
                +
0000bf 36a3     +CPI R26 , LOW ( 0x63 )
0000c0 e0e0     +LDI R30 , HIGH ( 0x63 )
0000c1 07be     +CPC R27 , R30
0000c2 e0e0     +LDI R30 , BYTE3 ( 0x63 )
0000c3 078e     +CPC R24 , R30
0000c4 e0e0     +LDI R30 , BYTE4 ( 0x63 )
0000c5 079e     +CPC R25 , R30
                 	__CPD2N 0x63
0000c6 f058      	BRLO _0x1B
                 ; 0000 008A         count = 0;
0000c7 d1a5      	RCALL SUBOPT_0x9
                 ; 0000 008B         speed = 0;
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 93e0 0164 	STS  _speed,R30
0000cb 93e0 0165 	STS  _speed+1,R30
0000cd 93e0 0166 	STS  _speed+2,R30
0000cf 93e0 0167 	STS  _speed+3,R30
                 ; 0000 008C         en_speed_measure = 0;
0000d1 24bb      	CLR  R11
                 ; 0000 008D    }
                 ; 0000 008E }
                 _0x1B:
0000d2 91e9      	LD   R30,Y+
0000d3 bfef      	OUT  SREG,R30
0000d4 91f9      	LD   R31,Y+
0000d5 91e9      	LD   R30,Y+
0000d6 91b9      	LD   R27,Y+
0000d7 91a9      	LD   R26,Y+
0000d8 9199      	LD   R25,Y+
0000d9 9189      	LD   R24,Y+
0000da 9179      	LD   R23,Y+
0000db 9169      	LD   R22,Y+
0000dc 9518      	RETI
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 ;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
                 ; 0000 0093 {
                 _timer1_capt_isr:
0000dd 920a      	ST   -Y,R0
0000de 921a      	ST   -Y,R1
0000df 936a      	ST   -Y,R22
0000e0 937a      	ST   -Y,R23
0000e1 938a      	ST   -Y,R24
0000e2 939a      	ST   -Y,R25
0000e3 93aa      	ST   -Y,R26
0000e4 93ba      	ST   -Y,R27
0000e5 93ea      	ST   -Y,R30
0000e6 93fa      	ST   -Y,R31
0000e7 b7ef      	IN   R30,SREG
0000e8 93ea      	ST   -Y,R30
                 ; 0000 0094     if(en_speed_measure){
0000e9 20bb      	TST  R11
0000ea f119      	BREQ _0x1C
                 ; 0000 0095         speed = 250000/(count*256 + TCNT0);
0000eb 91e0 0160 	LDS  R30,_count
0000ed 91f0 0161 	LDS  R31,_count+1
0000ef 9160 0162 	LDS  R22,_count+2
0000f1 9170 0163 	LDS  R23,_count+3
                +
0000f3 e0a0     +LDI R26 , LOW ( 0x100 )
0000f4 e0b1     +LDI R27 , HIGH ( 0x100 )
0000f5 e080     +LDI R24 , BYTE3 ( 0x100 )
0000f6 e090     +LDI R25 , BYTE4 ( 0x100 )
                 	__GETD2N 0x100
0000f7 d1b8      	RCALL __MULD12U
0000f8 01df      	MOVW R26,R30
0000f9 01cb      	MOVW R24,R22
0000fa b7e2      	IN   R30,0x32
0000fb d16f      	RCALL SUBOPT_0x8
0000fc d1ae      	RCALL __CWD1
0000fd d19c      	RCALL __ADDD12
                +
0000fe e9a0     +LDI R26 , LOW ( 0x3D090 )
0000ff edb0     +LDI R27 , HIGH ( 0x3D090 )
000100 e083     +LDI R24 , BYTE3 ( 0x3D090 )
000101 e090     +LDI R25 , BYTE4 ( 0x3D090 )
                 	__GETD2N 0x3D090
000102 d1e5      	RCALL __DIVD21U
000103 93e0 0164 	STS  _speed,R30
000105 93f0 0165 	STS  _speed+1,R31
000107 9360 0166 	STS  _speed+2,R22
000109 9370 0167 	STS  _speed+3,R23
                 ; 0000 0096         TCNT0 = 1;
00010b e0e1      	LDI  R30,LOW(1)
00010c bfe2      	OUT  0x32,R30
                 ; 0000 0097         count = 0;
00010d d15f      	RCALL SUBOPT_0x9
                 ; 0000 0098     }
                 ; 0000 0099     en_speed_measure = 1;
                 _0x1C:
00010e e0e1      	LDI  R30,LOW(1)
00010f 2ebe      	MOV  R11,R30
                 ; 0000 009A }
000110 91e9      	LD   R30,Y+
000111 bfef      	OUT  SREG,R30
000112 91f9      	LD   R31,Y+
000113 91e9      	LD   R30,Y+
000114 91b9      	LD   R27,Y+
000115 91a9      	LD   R26,Y+
000116 9199      	LD   R25,Y+
000117 9189      	LD   R24,Y+
000118 9179      	LD   R23,Y+
000119 9169      	LD   R22,Y+
00011a 9019      	LD   R1,Y+
00011b 9009      	LD   R0,Y+
00011c 9518      	RETI
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 ;void sem_seg(int a)
                 ; 0000 009F {
                 _sem_seg:
                 ; 0000 00A0     A1=a%10;
00011d 93ba      	ST   -Y,R27
00011e 93aa      	ST   -Y,R26
                 ;	a -> Y+0
00011f d157      	RCALL SUBOPT_0xA
000120 e0ea      	LDI  R30,LOW(10)
000121 e0f0      	LDI  R31,HIGH(10)
000122 d1ea      	RCALL __MODW21
000123 2e5e      	MOV  R5,R30
                 ; 0000 00A1     A2=(a%100)/10;
000124 d152      	RCALL SUBOPT_0xA
000125 e6e4      	LDI  R30,LOW(100)
000126 e0f0      	LDI  R31,HIGH(100)
000127 d1e5      	RCALL __MODW21
000128 01df      	MOVW R26,R30
000129 e0ea      	LDI  R30,LOW(10)
00012a e0f0      	LDI  R31,HIGH(10)
00012b d1b7      	RCALL __DIVW21
00012c 2e4e      	MOV  R4,R30
                 ; 0000 00A2     A3=(a%1000)/100;
00012d d149      	RCALL SUBOPT_0xA
00012e eee8      	LDI  R30,LOW(1000)
00012f e0f3      	LDI  R31,HIGH(1000)
000130 d1dc      	RCALL __MODW21
000131 01df      	MOVW R26,R30
000132 e6e4      	LDI  R30,LOW(100)
000133 e0f0      	LDI  R31,HIGH(100)
000134 d1ae      	RCALL __DIVW21
000135 2e7e      	MOV  R7,R30
                 ; 0000 00A3     A4=(a%10000)/1000;
000136 d140      	RCALL SUBOPT_0xA
000137 e1e0      	LDI  R30,LOW(10000)
000138 e2f7      	LDI  R31,HIGH(10000)
000139 d1d3      	RCALL __MODW21
00013a 01df      	MOVW R26,R30
00013b eee8      	LDI  R30,LOW(1000)
00013c e0f3      	LDI  R31,HIGH(1000)
00013d d1a5      	RCALL __DIVW21
00013e 2e6e      	MOV  R6,R30
                 ; 0000 00A4 }
00013f 9622      	ADIW R28,2
000140 9508      	RET
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 ;void buttons(void)
                 ; 0000 00A9 {
                 _buttons:
                 ; 0000 00AA     static char is_but_pres = 0;
                 ; 0000 00AB     static char is_stop = 0;
                 ; 0000 00AC     static unsigned int pause = 0;
                 ; 0000 00AD     static unsigned int pause_start = 0;
                 ; 0000 00AE     static unsigned int pause_stop = 0;
                 ; 0000 00AF     static char is_start_pres = 0;
                 ; 0000 00B0     static char rele = 0;
                 ; 0000 00B1 
                 ; 0000 00B2     if(PLUS){
000141 9999      	SBIC 0x13,1
000142 c00f      	RJMP _0x1D
                 ; 0000 00B3         if(!is_but_pres){
000143 d136      	RCALL SUBOPT_0xB
000144 f469      	BRNE _0x1E
                 ; 0000 00B4             cycles += STEP_CYCLE;
000145 01f6      	MOVW R30,R12
000146 963a      	ADIW R30,10
000147 016f      	MOVW R12,R30
                 ; 0000 00B5 
                 ; 0000 00B6             if(cycles>MAX_CYCLE)
000148 edee      	LDI  R30,LOW(990)
000149 e0f3      	LDI  R31,HIGH(990)
00014a 15ec      	CP   R30,R12
00014b 05fd      	CPC  R31,R13
00014c f414      	BRGE _0x1F
                 ; 0000 00B7                 cycles = MIN_CYCLE;
00014d 24cc      	CLR  R12
00014e 24dd      	CLR  R13
                 ; 0000 00B8 
                 ; 0000 00B9             is_but_pres = 1;
                 _0x1F:
00014f e0e1      	LDI  R30,LOW(1)
000150 93e0 016a 	STS  _is_but_pres_S0000004000,R30
                 ; 0000 00BA         }
                 ; 0000 00BB     }
                 _0x1E:
                 ; 0000 00BC 
                 ; 0000 00BD     if(MINUS){
                 _0x1D:
000152 9998      	SBIC 0x13,0
000153 c00f      	RJMP _0x20
                 ; 0000 00BE         if(!is_but_pres){
000154 d125      	RCALL SUBOPT_0xB
000155 f469      	BRNE _0x21
                 ; 0000 00BF             cycles -= STEP_CYCLE;
000156 01f6      	MOVW R30,R12
000157 973a      	SBIW R30,10
000158 016f      	MOVW R12,R30
                 ; 0000 00C0 
                 ; 0000 00C1             if(cycles<MIN_CYCLE)
000159 2400      	CLR  R0
00015a 14c0      	CP   R12,R0
00015b 04d0      	CPC  R13,R0
00015c f41c      	BRGE _0x22
                 ; 0000 00C2                 cycles = MAX_CYCLE;
00015d edee      	LDI  R30,LOW(990)
00015e e0f3      	LDI  R31,HIGH(990)
00015f 016f      	MOVW R12,R30
                 ; 0000 00C3 
                 ; 0000 00C4             is_but_pres = 1;
                 _0x22:
000160 e0e1      	LDI  R30,LOW(1)
000161 93e0 016a 	STS  _is_but_pres_S0000004000,R30
                 ; 0000 00C5         }
                 ; 0000 00C6     }
                 _0x21:
                 ; 0000 00C7 
                 ; 0000 00C8     if(is_but_pres){
                 _0x20:
000163 d116      	RCALL SUBOPT_0xB
000164 f091      	BREQ _0x23
                 ; 0000 00C9         pause++;
000165 e6ac      	LDI  R26,LOW(_pause_S0000004000)
000166 e0b1      	LDI  R27,HIGH(_pause_S0000004000)
000167 d116      	RCALL SUBOPT_0xC
                 ; 0000 00CA         if(pause>DELAY){
000168 91a0 016c 	LDS  R26,_pause_S0000004000
00016a 91b0 016d 	LDS  R27,_pause_S0000004000+1
00016c 39a1      	CPI  R26,LOW(0x191)
00016d e0e1      	LDI  R30,HIGH(0x191)
00016e 07be      	CPC  R27,R30
00016f f038      	BRLO _0x24
                 ; 0000 00CB             is_but_pres = 0;
000170 e0e0      	LDI  R30,LOW(0)
000171 93e0 016a 	STS  _is_but_pres_S0000004000,R30
                 ; 0000 00CC             pause = 0;
000173 93e0 016c 	STS  _pause_S0000004000,R30
000175 93e0 016d 	STS  _pause_S0000004000+1,R30
                 ; 0000 00CD         }
                 ; 0000 00CE     }
                 _0x24:
                 ; 0000 00CF 
                 ; 0000 00D0     if(START)
                 _0x23:
000177 999a      	SBIC 0x13,2
000178 c003      	RJMP _0x25
                 ; 0000 00D1         is_start_pres = 1;
000179 e0e1      	LDI  R30,LOW(1)
00017a 93e0 0172 	STS  _is_start_pres_S0000004000,R30
                 ; 0000 00D2 
                 ; 0000 00D3     if(is_start_pres && !is_stop){
                 _0x25:
00017c 91e0 0172 	LDS  R30,_is_start_pres_S0000004000
00017e 30e0      	CPI  R30,0
00017f f021      	BREQ _0x27
000180 91e0 016b 	LDS  R30,_is_stop_S0000004000
000182 30e0      	CPI  R30,0
000183 f009      	BREQ _0x28
                 _0x27:
000184 c01f      	RJMP _0x26
                 _0x28:
                 ; 0000 00D4         pause_start++;
000185 e6ae      	LDI  R26,LOW(_pause_start_S0000004000)
000186 e0b1      	LDI  R27,HIGH(_pause_start_S0000004000)
000187 d0f6      	RCALL SUBOPT_0xC
                 ; 0000 00D5         if(pause_start>4*DELAY){
000188 91a0 016e 	LDS  R26,_pause_start_S0000004000
00018a 91b0 016f 	LDS  R27,_pause_start_S0000004000+1
00018c 34a1      	CPI  R26,LOW(0x641)
00018d e0e6      	LDI  R30,HIGH(0x641)
00018e 07be      	CPC  R27,R30
00018f f0a0      	BRLO _0x29
                 ; 0000 00D6             if(START){
000190 999a      	SBIC 0x13,2
000191 c004      	RJMP _0x2A
                 ; 0000 00D7                 is_stop = 1;
000192 e0e1      	LDI  R30,LOW(1)
000193 93e0 016b 	STS  _is_stop_S0000004000,R30
                 ; 0000 00D8             }else{
000195 c00e      	RJMP _0x2B
                 _0x2A:
                 ; 0000 00D9                 is_start_pres = 0;
000196 d0ed      	RCALL SUBOPT_0xD
                 ; 0000 00DA                 pause_start = 0;
                 ; 0000 00DB                 if(rele){
000197 d0f4      	RCALL SUBOPT_0xE
000198 f011      	BREQ _0x2C
                 ; 0000 00DC                     rele = 0;
000199 e0e0      	LDI  R30,LOW(0)
00019a c001      	RJMP _0x47
                 ; 0000 00DD                 }else {
                 _0x2C:
                 ; 0000 00DE                     rele = 1;
00019b e0e1      	LDI  R30,LOW(1)
                 _0x47:
00019c 93e0 0173 	STS  _rele_S0000004000,R30
                 ; 0000 00DF                 }
                 ; 0000 00E0 
                 ; 0000 00E1                 if(rele){
00019e d0ed      	RCALL SUBOPT_0xE
00019f f011      	BREQ _0x2E
                 ; 0000 00E2                     set_timer(3);
0001a0 e0a3      	LDI  R26,LOW(3)
0001a1 c001      	RJMP _0x48
                 ; 0000 00E3                 }else {
                 _0x2E:
                 ; 0000 00E4                     set_timer(2);
0001a2 e0a2      	LDI  R26,LOW(2)
                 _0x48:
0001a3 d035      	RCALL _set_timer
                 ; 0000 00E5                 }
                 ; 0000 00E6             }
                 _0x2B:
                 ; 0000 00E7         }
                 ; 0000 00E8 
                 ; 0000 00E9     }
                 _0x29:
                 ; 0000 00EA 
                 ; 0000 00EB     if(is_stop){
                 _0x26:
0001a4 91e0 016b 	LDS  R30,_is_stop_S0000004000
0001a6 30e0      	CPI  R30,0
0001a7 f0a1      	BREQ _0x30
                 ; 0000 00EC         pause_stop++;
0001a8 e7a0      	LDI  R26,LOW(_pause_stop_S0000004000)
0001a9 e0b1      	LDI  R27,HIGH(_pause_stop_S0000004000)
0001aa d0d3      	RCALL SUBOPT_0xC
                 ; 0000 00ED         rele = 0;
0001ab d0e4      	RCALL SUBOPT_0xF
                 ; 0000 00EE         set_timer(1);
                 ; 0000 00EF         if(pause_stop>5*DELAY){
0001ac 91a0 0170 	LDS  R26,_pause_stop_S0000004000
0001ae 91b0 0171 	LDS  R27,_pause_stop_S0000004000+1
0001b0 3da1      	CPI  R26,LOW(0x7D1)
0001b1 e0e7      	LDI  R30,HIGH(0x7D1)
0001b2 07be      	CPC  R27,R30
0001b3 f040      	BRLO _0x31
                 ; 0000 00F0             is_start_pres = 0;
0001b4 d0cf      	RCALL SUBOPT_0xD
                 ; 0000 00F1             pause_start = 0;
                 ; 0000 00F2             is_stop = 0;
0001b5 e0e0      	LDI  R30,LOW(0)
0001b6 93e0 016b 	STS  _is_stop_S0000004000,R30
                 ; 0000 00F3             pause_stop=0;
0001b8 93e0 0170 	STS  _pause_stop_S0000004000,R30
0001ba 93e0 0171 	STS  _pause_stop_S0000004000+1,R30
                 ; 0000 00F4         }
                 ; 0000 00F5     }
                 _0x31:
                 ; 0000 00F6 
                 ; 0000 00F7     left = cycles - TCNT1/60;
                 _0x30:
0001bc b5ec      	IN   R30,0x2C
0001bd b5fd      	IN   R31,0x2C+1
0001be 01df      	MOVW R26,R30
0001bf e3ec      	LDI  R30,LOW(60)
0001c0 e0f0      	LDI  R31,HIGH(60)
0001c1 d10e      	RCALL __DIVW21U
0001c2 01df      	MOVW R26,R30
0001c3 01f6      	MOVW R30,R12
0001c4 1bea      	SUB  R30,R26
0001c5 0bfb      	SBC  R31,R27
0001c6 93e0 0168 	STS  _left,R30
0001c8 93f0 0169 	STS  _left+1,R31
                 ; 0000 00F8 
                 ; 0000 00F9     if(left<1){
0001ca d08c      	RCALL SUBOPT_0x4
0001cb 9711      	SBIW R26,1
0001cc f434      	BRGE _0x32
                 ; 0000 00FA         left = 0;
0001cd e0e0      	LDI  R30,LOW(0)
0001ce 93e0 0168 	STS  _left,R30
0001d0 93e0 0169 	STS  _left+1,R30
                 ; 0000 00FB         rele = 0;
0001d2 d0bd      	RCALL SUBOPT_0xF
                 ; 0000 00FC         set_timer(1);
                 ; 0000 00FD     }
                 ; 0000 00FE 
                 ; 0000 00FF     if(rele){
                 _0x32:
0001d3 d0b8      	RCALL SUBOPT_0xE
0001d4 f011      	BREQ _0x33
                 ; 0000 0100         PORTD|=(1<<7);
0001d5 9a97      	SBI  0x12,7
                 ; 0000 0101     }else {
0001d6 c001      	RJMP _0x34
                 _0x33:
                 ; 0000 0102         PORTD&=~(1<<7);
0001d7 9897      	CBI  0x12,7
                 ; 0000 0103     }
                 _0x34:
                 ; 0000 0104 }
0001d8 9508      	RET
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 ;void set_timer(char mode)
                 ; 0000 0109 {
                 _set_timer:
                 ; 0000 010A     /*
                 ; 0000 010B         MODES:
                 ; 0000 010C         0 - disable, reset counter
                 ; 0000 010D         1 - enable interrupt from each puls, disable counting pulses, reset counter
                 ; 0000 010E         2 - enable interrupt from each puls, disable counting pulses
                 ; 0000 010F         3 - enable interrupt from each puls, enable counting pulses
                 ; 0000 0110     */
                 ; 0000 0111     switch(mode)
0001d9 93aa      	ST   -Y,R26
                 ;	mode -> Y+0
0001da 81e8      	LD   R30,Y
0001db d08f      	RCALL SUBOPT_0x8
                 ; 0000 0112     {
                 ; 0000 0113         case 0: TCCR1B = 0x00;
0001dc 9730      	SBIW R30,0
0001dd f419      	BRNE _0x38
0001de e0e0      	LDI  R30,LOW(0)
0001df d0b5      	RCALL SUBOPT_0x10
                 ; 0000 0114                 TCNT1H = 0x00;
                 ; 0000 0115                 TCNT1L = 0x00;
                 ; 0000 0116             break;
0001e0 c014      	RJMP _0x37
                 ; 0000 0117 
                 ; 0000 0118         case 1: TCCR1B = 0x40;
                 _0x38:
0001e1 30e1      	CPI  R30,LOW(0x1)
0001e2 e0a0      	LDI  R26,HIGH(0x1)
0001e3 07fa      	CPC  R31,R26
0001e4 f419      	BRNE _0x39
0001e5 e4e0      	LDI  R30,LOW(64)
0001e6 d0ae      	RCALL SUBOPT_0x10
                 ; 0000 0119                 TCNT1H = 0x00;
                 ; 0000 011A                 TCNT1L = 0x00;
                 ; 0000 011B             break;
0001e7 c00d      	RJMP _0x37
                 ; 0000 011C 
                 ; 0000 011D         case 2: TCCR1B = 0x40;
                 _0x39:
0001e8 30e2      	CPI  R30,LOW(0x2)
0001e9 e0a0      	LDI  R26,HIGH(0x2)
0001ea 07fa      	CPC  R31,R26
0001eb f419      	BRNE _0x3A
0001ec e4e0      	LDI  R30,LOW(64)
0001ed bdee      	OUT  0x2E,R30
                 ; 0000 011E             break;
0001ee c006      	RJMP _0x37
                 ; 0000 011F 
                 ; 0000 0120         case 3: TCCR1B = 0x47;
                 _0x3A:
0001ef 30e3      	CPI  R30,LOW(0x3)
0001f0 e0a0      	LDI  R26,HIGH(0x3)
0001f1 07fa      	CPC  R31,R26
0001f2 f411      	BRNE _0x3C
0001f3 e4e7      	LDI  R30,LOW(71)
0001f4 bdee      	OUT  0x2E,R30
                 ; 0000 0121             break;
                 ; 0000 0122 
                 ; 0000 0123         default:
                 _0x3C:
                 ; 0000 0124     }
                 _0x37:
                 ; 0000 0125 }
0001f5 9621      	ADIW R28,1
0001f6 9508      	RET
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 ;void set_speed(void)
                 ; 0000 012A {
                 _set_speed:
                 ; 0000 012B     static unsigned int pause = 0;
                 ; 0000 012C 
                 ; 0000 012D     if(pause>2*DELAY){
0001f7 91a0 0174 	LDS  R26,_pause_S0000006000
0001f9 91b0 0175 	LDS  R27,_pause_S0000006000+1
0001fb 32a1      	CPI  R26,LOW(0x321)
0001fc e0e3      	LDI  R30,HIGH(0x321)
0001fd 07be      	CPC  R27,R30
0001fe f048      	BRLO _0x3D
                 ; 0000 012E         speed_show = speed;
                +
0001ff 9080 0164+LDS R8 , 0 + ( _speed )
000201 9090 0165+LDS R9 , 0 + ( _speed ) + 1
                 	__GETWRMN 8,9,0,_speed
                 ; 0000 012F         pause = 0;
000203 e0e0      	LDI  R30,LOW(0)
000204 93e0 0174 	STS  _pause_S0000006000,R30
000206 93e0 0175 	STS  _pause_S0000006000+1,R30
                 ; 0000 0130     }
                 ; 0000 0131     pause++;
                 _0x3D:
000208 e7a4      	LDI  R26,LOW(_pause_S0000006000)
000209 e0b1      	LDI  R27,HIGH(_pause_S0000006000)
00020a d073      	RCALL SUBOPT_0xC
                 ; 0000 0132 }
00020b 9508      	RET
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 ;void send_hc595(char anods, char led_1, char led_2)
                 ; 0000 0137 {
                 _send_hc595:
                 ; 0000 0138     CS_ON
00020c 93aa      	ST   -Y,R26
                 ;	anods -> Y+2
                 ;	led_1 -> Y+1
                 ;	led_2 -> Y+0
00020d 98c2      	CBI  0x18,2
                 ; 0000 0139     SPDR = anods;
00020e 81ea      	LDD  R30,Y+2
00020f b9ef      	OUT  0xF,R30
                 ; 0000 013A     while(!(SPSR & (1<<SPIF))){}
                 _0x3E:
000210 9b77      	SBIS 0xE,7
000211 cffe      	RJMP _0x3E
                 ; 0000 013B     SPDR = led_2;
000212 81e8      	LD   R30,Y
000213 b9ef      	OUT  0xF,R30
                 ; 0000 013C     while(!(SPSR & (1<<SPIF))){}
                 _0x41:
000214 9b77      	SBIS 0xE,7
000215 cffe      	RJMP _0x41
                 ; 0000 013D     SPDR = led_1;
000216 81e9      	LDD  R30,Y+1
000217 b9ef      	OUT  0xF,R30
                 ; 0000 013E     while(!(SPSR & (1<<SPIF))){}
                 _0x44:
000218 9b77      	SBIS 0xE,7
000219 cffe      	RJMP _0x44
                 ; 0000 013F     CS_OFF
00021a 9ac2      	SBI  0x18,2
                 ; 0000 0140 }
00021b 9623      	ADIW R28,3
00021c 9508      	RET
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 ;void init(void)
                 ; 0000 0145 {
                 _init:
                 ; 0000 0146  // Input/Output Ports initialization
                 ; 0000 0147 // Port B initialization
                 ; 0000 0148 // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 0149 // State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T
                 ; 0000 014A PORTB=0x00;
00021d e0e0      	LDI  R30,LOW(0)
00021e bbe8      	OUT  0x18,R30
                 ; 0000 014B DDRB=0b00101110;
00021f e2ee      	LDI  R30,LOW(46)
000220 bbe7      	OUT  0x17,R30
                 ; 0000 014C 
                 ; 0000 014D // Port C initialization
                 ; 0000 014E // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 014F // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0150 PORTC=0b0011111;
000221 e1ef      	LDI  R30,LOW(31)
000222 bbe5      	OUT  0x15,R30
                 ; 0000 0151 DDRC=0b0000000;
000223 e0e0      	LDI  R30,LOW(0)
000224 bbe4      	OUT  0x14,R30
                 ; 0000 0152 
                 ; 0000 0153 // Port D initialization
                 ; 0000 0154 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0155 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0156 PORTD=0b00100000;
000225 e2e0      	LDI  R30,LOW(32)
000226 bbe2      	OUT  0x12,R30
                 ; 0000 0157 DDRD=0b10000000;
000227 e8e0      	LDI  R30,LOW(128)
000228 bbe1      	OUT  0x11,R30
                 ; 0000 0158 
                 ; 0000 0159 // Timer/Counter 0 initialization
                 ; 0000 015A // Clock source: System Clock
                 ; 0000 015B // Clock value: 250,000 kHz
                 ; 0000 015C TCCR0=0x03;
000229 e0e3      	LDI  R30,LOW(3)
00022a bfe3      	OUT  0x33,R30
                 ; 0000 015D TCNT0=0x00;
00022b e0e0      	LDI  R30,LOW(0)
00022c bfe2      	OUT  0x32,R30
                 ; 0000 015E 
                 ; 0000 015F // Timer/Counter 1 initialization
                 ; 0000 0160 // Clock source: System Clock
                 ; 0000 0161 // Clock value: Timer1 Stopped
                 ; 0000 0162 // Mode: Normal top=0xFFFF
                 ; 0000 0163 // OC1A output: Discon.
                 ; 0000 0164 // OC1B output: Discon.
                 ; 0000 0165 // Noise Canceler: Off
                 ; 0000 0166 // Input Capture on Rising Edge
                 ; 0000 0167 // Timer1 Overflow Interrupt: Off
                 ; 0000 0168 // Input Capture Interrupt: On
                 ; 0000 0169 // Compare A Match Interrupt: Off
                 ; 0000 016A // Compare B Match Interrupt: Off
                 ; 0000 016B TCCR1A=0x00;
00022d bdef      	OUT  0x2F,R30
                 ; 0000 016C TCCR1B=0x40;  //TCCR1B=0x40; impuls prerblvanie,  TCCR1B=0x47; s4et i prerblvanie
00022e e4e0      	LDI  R30,LOW(64)
00022f d065      	RCALL SUBOPT_0x10
                 ; 0000 016D TCNT1H=0x00;
                 ; 0000 016E TCNT1L=0x00;
                 ; 0000 016F ICR1H=0x00;
000230 e0e0      	LDI  R30,LOW(0)
000231 bde7      	OUT  0x27,R30
                 ; 0000 0170 ICR1L=0x00;
000232 bde6      	OUT  0x26,R30
                 ; 0000 0171 OCR1AH=0x00;
000233 bdeb      	OUT  0x2B,R30
                 ; 0000 0172 OCR1AL=0x00;
000234 bdea      	OUT  0x2A,R30
                 ; 0000 0173 OCR1BH=0x00;
000235 bde9      	OUT  0x29,R30
                 ; 0000 0174 OCR1BL=0x00;
000236 bde8      	OUT  0x28,R30
                 ; 0000 0175 
                 ; 0000 0176 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0177 TIMSK=0x21;
000237 e2e1      	LDI  R30,LOW(33)
000238 bfe9      	OUT  0x39,R30
                 ; 0000 0178 
                 ; 0000 0179 // Analog Comparator initialization
                 ; 0000 017A // Analog Comparator: Off
                 ; 0000 017B // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 017C ACSR=0x80;
000239 e8e0      	LDI  R30,LOW(128)
00023a b9e8      	OUT  0x8,R30
                 ; 0000 017D SFIOR=0x00;
00023b e0e0      	LDI  R30,LOW(0)
00023c bfe0      	OUT  0x30,R30
                 ; 0000 017E 
                 ; 0000 017F // SPI initialization
                 ; 0000 0180 // SPI Type: Master
                 ; 0000 0181 // SPI Clock Rate: 125,000 kHz
                 ; 0000 0182 // SPI Clock Phase: Cycle Start
                 ; 0000 0183 // SPI Clock Polarity: High
                 ; 0000 0184 // SPI Data Order: MSB First
                 ; 0000 0185 SPCR=0x53;//5b
00023d e5e3      	LDI  R30,LOW(83)
00023e b9ed      	OUT  0xD,R30
                 ; 0000 0186 SPSR=0x00;
00023f e0e0      	LDI  R30,LOW(0)
000240 b9ee      	OUT  0xE,R30
                 ; 0000 0187 
                 ; 0000 0188 #asm("sei")
000241 9478      	sei
                 ; 0000 0189 }
000242 9508      	RET
                 ;//-----------------------------------------------------------
                 ;//
                 ;//-----------------------------------------------------------
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.DSEG
                 _count:
000160           	.BYTE 0x4
                 _speed:
000164           	.BYTE 0x4
                 _left:
000168           	.BYTE 0x2
                 _is_but_pres_S0000004000:
00016a           	.BYTE 0x1
                 _is_stop_S0000004000:
00016b           	.BYTE 0x1
                 _pause_S0000004000:
00016c           	.BYTE 0x2
                 _pause_start_S0000004000:
00016e           	.BYTE 0x2
                 _pause_stop_S0000004000:
000170           	.BYTE 0x2
                 _is_start_pres_S0000004000:
000172           	.BYTE 0x1
                 _rele_S0000004000:
000173           	.BYTE 0x1
                 _pause_S0000006000:
000174           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000243 e0ea      	LDI  R30,LOW(10)
000244 e0f0      	LDI  R31,HIGH(10)
000245 168e      	CP   R8,R30
000246 069f      	CPC  R9,R31
000247 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000248 e6e4      	LDI  R30,LOW(100)
000249 e0f0      	LDI  R31,HIGH(100)
00024a 168e      	CP   R8,R30
00024b 069f      	CPC  R9,R31
00024c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00024d eee8      	LDI  R30,LOW(1000)
00024e e0f3      	LDI  R31,HIGH(1000)
00024f 168e      	CP   R8,R30
000250 069f      	CPC  R9,R31
000251 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000252 e0a1      	LDI  R26,LOW(1)
000253 d04f      	RCALL __LSLB12
000254 95e0      	COM  R30
000255 231e      	AND  R17,R30
000256 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000257 91a0 0168 	LDS  R26,_left
000259 91b0 0169 	LDS  R27,_left+1
00025b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00025c 2de7      	MOV  R30,R7
00025d e0f0      	LDI  R31,0
00025e 5dea      	SUBI R30,LOW(-_digit_G000*2)
00025f 4fff      	SBCI R31,HIGH(-_digit_G000*2)
000260 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000261 2de4      	MOV  R30,R4
000262 e0f0      	LDI  R31,0
000263 5dea      	SUBI R30,LOW(-_digit_G000*2)
000264 4fff      	SBCI R31,HIGH(-_digit_G000*2)
000265 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000266 2de5      	MOV  R30,R5
000267 e0f0      	LDI  R31,0
000268 5dea      	SUBI R30,LOW(-_digit_G000*2)
000269 4fff      	SBCI R31,HIGH(-_digit_G000*2)
00026a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
00026b e0f0      	LDI  R31,0
00026c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9:
00026d e0e0      	LDI  R30,LOW(0)
00026e 93e0 0160 	STS  _count,R30
000270 93e0 0161 	STS  _count+1,R30
000272 93e0 0162 	STS  _count+2,R30
000274 93e0 0163 	STS  _count+3,R30
000276 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000277 81a8      	LD   R26,Y
000278 81b9      	LDD  R27,Y+1
000279 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
00027a 91e0 016a 	LDS  R30,_is_but_pres_S0000004000
00027c 30e0      	CPI  R30,0
00027d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xC:
00027e 91ed      	LD   R30,X+
00027f 91fd      	LD   R31,X+
000280 9631      	ADIW R30,1
000281 93fe      	ST   -X,R31
000282 93ee      	ST   -X,R30
000283 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
000284 e0e0      	LDI  R30,LOW(0)
000285 93e0 0172 	STS  _is_start_pres_S0000004000,R30
000287 93e0 016e 	STS  _pause_start_S0000004000,R30
000289 93e0 016f 	STS  _pause_start_S0000004000+1,R30
00028b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
00028c 91e0 0173 	LDS  R30,_rele_S0000004000
00028e 30e0      	CPI  R30,0
00028f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
000290 e0e0      	LDI  R30,LOW(0)
000291 93e0 0173 	STS  _rele_S0000004000,R30
000293 e0a1      	LDI  R26,LOW(1)
000294 cf44      	RJMP _set_timer
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x10:
000295 bdee      	OUT  0x2E,R30
000296 e0e0      	LDI  R30,LOW(0)
000297 bded      	OUT  0x2D,R30
000298 bdec      	OUT  0x2C,R30
000299 9508      	RET
                 
                 
                 	.CSEG
                 __ADDD12:
00029a 0fea      	ADD  R30,R26
00029b 1ffb      	ADC  R31,R27
00029c 1f68      	ADC  R22,R24
00029d 1f79      	ADC  R23,R25
00029e 9508      	RET
                 
                 __ANEGW1:
00029f 95f1      	NEG  R31
0002a0 95e1      	NEG  R30
0002a1 40f0      	SBCI R31,0
0002a2 9508      	RET
                 
                 __LSLB12:
0002a3 23ee      	TST  R30
0002a4 2e0e      	MOV  R0,R30
0002a5 2fea      	MOV  R30,R26
0002a6 f019      	BREQ __LSLB12R
                 __LSLB12L:
0002a7 0fee      	LSL  R30
0002a8 940a      	DEC  R0
0002a9 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0002aa 9508      	RET
                 
                 __CWD1:
0002ab 2f6f      	MOV  R22,R31
0002ac 0f66      	ADD  R22,R22
0002ad 0b66      	SBC  R22,R22
0002ae 2f76      	MOV  R23,R22
0002af 9508      	RET
                 
                 __MULD12U:
0002b0 9f7a      	MUL  R23,R26
0002b1 2d70      	MOV  R23,R0
0002b2 9f6b      	MUL  R22,R27
0002b3 0d70      	ADD  R23,R0
0002b4 9ff8      	MUL  R31,R24
0002b5 0d70      	ADD  R23,R0
0002b6 9fe9      	MUL  R30,R25
0002b7 0d70      	ADD  R23,R0
0002b8 9f6a      	MUL  R22,R26
0002b9 2d60      	MOV  R22,R0
0002ba 0d71      	ADD  R23,R1
0002bb 9ffb      	MUL  R31,R27
0002bc 0d60      	ADD  R22,R0
0002bd 1d71      	ADC  R23,R1
0002be 9fe8      	MUL  R30,R24
0002bf 0d60      	ADD  R22,R0
0002c0 1d71      	ADC  R23,R1
0002c1 2788      	CLR  R24
0002c2 9ffa      	MUL  R31,R26
0002c3 2df0      	MOV  R31,R0
0002c4 0d61      	ADD  R22,R1
0002c5 1f78      	ADC  R23,R24
0002c6 9feb      	MUL  R30,R27
0002c7 0df0      	ADD  R31,R0
0002c8 1d61      	ADC  R22,R1
0002c9 1f78      	ADC  R23,R24
0002ca 9fea      	MUL  R30,R26
0002cb 2de0      	MOV  R30,R0
0002cc 0df1      	ADD  R31,R1
0002cd 1f68      	ADC  R22,R24
0002ce 1f78      	ADC  R23,R24
0002cf 9508      	RET
                 
                 __DIVW21U:
0002d0 2400      	CLR  R0
0002d1 2411      	CLR  R1
0002d2 e190      	LDI  R25,16
                 __DIVW21U1:
0002d3 0faa      	LSL  R26
0002d4 1fbb      	ROL  R27
0002d5 1c00      	ROL  R0
0002d6 1c11      	ROL  R1
0002d7 1a0e      	SUB  R0,R30
0002d8 0a1f      	SBC  R1,R31
0002d9 f418      	BRCC __DIVW21U2
0002da 0e0e      	ADD  R0,R30
0002db 1e1f      	ADC  R1,R31
0002dc c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002dd 60a1      	SBR  R26,1
                 __DIVW21U3:
0002de 959a      	DEC  R25
0002df f799      	BRNE __DIVW21U1
0002e0 01fd      	MOVW R30,R26
0002e1 01d0      	MOVW R26,R0
0002e2 9508      	RET
                 
                 __DIVW21:
0002e3 d037      	RCALL __CHKSIGNW
0002e4 dfeb      	RCALL __DIVW21U
0002e5 f40e      	BRTC __DIVW211
0002e6 dfb8      	RCALL __ANEGW1
                 __DIVW211:
0002e7 9508      	RET
                 
                 __DIVD21U:
0002e8 933f      	PUSH R19
0002e9 934f      	PUSH R20
0002ea 935f      	PUSH R21
0002eb 2400      	CLR  R0
0002ec 2411      	CLR  R1
0002ed 2744      	CLR  R20
0002ee 2755      	CLR  R21
0002ef e230      	LDI  R19,32
                 __DIVD21U1:
0002f0 0faa      	LSL  R26
0002f1 1fbb      	ROL  R27
0002f2 1f88      	ROL  R24
0002f3 1f99      	ROL  R25
0002f4 1c00      	ROL  R0
0002f5 1c11      	ROL  R1
0002f6 1f44      	ROL  R20
0002f7 1f55      	ROL  R21
0002f8 1a0e      	SUB  R0,R30
0002f9 0a1f      	SBC  R1,R31
0002fa 0b46      	SBC  R20,R22
0002fb 0b57      	SBC  R21,R23
0002fc f428      	BRCC __DIVD21U2
0002fd 0e0e      	ADD  R0,R30
0002fe 1e1f      	ADC  R1,R31
0002ff 1f46      	ADC  R20,R22
000300 1f57      	ADC  R21,R23
000301 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000302 60a1      	SBR  R26,1
                 __DIVD21U3:
000303 953a      	DEC  R19
000304 f759      	BRNE __DIVD21U1
000305 01fd      	MOVW R30,R26
000306 01bc      	MOVW R22,R24
000307 01d0      	MOVW R26,R0
000308 01ca      	MOVW R24,R20
000309 915f      	POP  R21
00030a 914f      	POP  R20
00030b 913f      	POP  R19
00030c 9508      	RET
                 
                 __MODW21:
00030d 94e8      	CLT
00030e ffb7      	SBRS R27,7
00030f c004      	RJMP __MODW211
000310 95a0      	COM  R26
000311 95b0      	COM  R27
000312 9611      	ADIW R26,1
000313 9468      	SET
                 __MODW211:
000314 fdf7      	SBRC R31,7
000315 df89      	RCALL __ANEGW1
000316 dfb9      	RCALL __DIVW21U
000317 01fd      	MOVW R30,R26
000318 f40e      	BRTC __MODW212
000319 df85      	RCALL __ANEGW1
                 __MODW212:
00031a 9508      	RET
                 
                 __CHKSIGNW:
00031b 94e8      	CLT
00031c fff7      	SBRS R31,7
00031d c002      	RJMP __CHKSW1
00031e df80      	RCALL __ANEGW1
00031f 9468      	SET
                 __CHKSW1:
000320 ffb7      	SBRS R27,7
000321 c006      	RJMP __CHKSW2
000322 95a0      	COM  R26
000323 95b0      	COM  R27
000324 9611      	ADIW R26,1
000325 f800      	BLD  R0,0
000326 9403      	INC  R0
000327 fa00      	BST  R0,0
                 __CHKSW2:
000328 9508      	RET
                 
                 __GETD1P_INC:
000329 91ed      	LD   R30,X+
00032a 91fd      	LD   R31,X+
00032b 916d      	LD   R22,X+
00032c 917d      	LD   R23,X+
00032d 9508      	RET
                 
                 __PUTDP1_DEC:
00032e 937e      	ST   -X,R23
00032f 936e      	ST   -X,R22
000330 93fe      	ST   -X,R31
000331 93ee      	ST   -X,R30
000332 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  34 r1 :  17 r2 :   0 r3 :   0 r4 :   2 r5 :   2 r6 :   2 r7 :   2 
r8 :   5 r9 :   4 r10:   0 r11:   3 r12:   9 r13:   3 r14:   0 r15:   0 
r16:   6 r17:   4 r18:  15 r19:   9 r20:   7 r21:  14 r22:  30 r23:  24 
r24:  27 r25:  15 r26:  68 r27:  37 r28:   4 r29:   1 r30: 229 r31:  63 
x  :  15 y  :  52 z  :  14 
Registers used: 30 out of 35 (85.7%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  14 add   :  13 
adiw  :   7 and   :   1 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  10 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   0 brmi  :   0 brne  :  19 brpl  :   0 brsh  :   1 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :   2 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  13 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 cp    :   5 
cpc   :  15 cpi   :  25 cpse  :   0 dec   :   4 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 
inc   :   1 ld    :  29 ldd   :   3 ldi   : 124 lds   :  25 lpm   :  21 
lsl   :   3 lsr   :   0 mov   :  20 movw  :  24 mul   :  10 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   0 out   :  39 
pop   :   3 push  :   3 rcall :  71 ret   :  34 reti  :   2 rjmp  :  46 
rol   :  10 ror   :   0 sbc   :   6 sbci  :   8 sbi   :   2 sbic  :   4 
sbis  :   3 sbiw  :   6 sbr   :   2 sbrc  :   1 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  35 std   :   0 
sts   :  33 sub   :   3 subi  :   7 swap  :   0 tst   :   2 wdr   :   0 

Instructions used: 58 out of 114 (50.9%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000666   1610     28   1638    8192  20.0%
[.dseg] 0x000060 0x000176      0     22     22    1119   2.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
